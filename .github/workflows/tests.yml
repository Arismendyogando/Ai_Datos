name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  STAGING_ENV: staging
  PROD_ENV: production

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    # Backend setup
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Security check backend dependencies
      run: |
        cd backend
        pip install safety
        safety check --full-report
    
    - name: Run backend unit tests
      run: |
        cd backend
        pytest tests/ --cov=backend --cov-report=xml
    
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        coverage_threshold: 80
        coverage_threshold_fail: true

    - name: Notify Slack on test failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: '#ff0000'
        SLACK_TITLE: 'Tests Failed'
        SLACK_MESSAGE: 'Some tests failed in the CI pipeline. Please check the logs.'
    
    # Frontend setup
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test
    
    - name: Lint frontend code
      run: |
        cd frontend
        npm run lint
    
    - name: Security check frontend dependencies
      run: |
        cd frontend
        npm install -g npm-audit-ci-wrapper
        npm-audit-ci-wrapper --critical
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Run integration tests
      run: |
        cd backend
        pytest tests/integration/ --cov=backend --cov-append --cov-report=xml
    
    - name: Analyze code quality
      uses: sonarsource/sonarcloud-github-action@master
      with:
        projectBaseDir: .
        args: >
          -Dsonar.projectKey=invoice-processor
          -Dsonar.organization=my-org
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
          -Dsonar.python.coverage.reportPaths=backend/coverage.xml
          -Dsonar.qualitygate.wait=true

  deploy:
    name: Deploy to Staging
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        service_account_key: ${{ env.GCP_SA_KEY }}
        export_default_credentials: true
    
    - name: Deploy backend
      run: |
        cd backend
        gcloud app deploy --version=staging --quiet
    
    - name: Install Firebase CLI
      run: npm install -g firebase-tools

    - name: Deploy frontend to Firebase
      run: |
        cd frontend
        firebase use staging
        firebase deploy --only hosting --token ${{ secrets.FIREBASE_TOKEN }}
    
    - name: Notify Slack
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: '#36a64f'
        SLACK_TITLE: 'Staging Deployment Successful'
        SLACK_MESSAGE: 'New version deployed to staging environment'

  production-deploy:
    name: Deploy to Production
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        service_account_key: ${{ env.GCP_SA_KEY }}
        export_default_credentials: true
    
    - name: Deploy backend to production
      run: |
        cd backend
        gcloud app deploy --version=prod --quiet
    
    - name: Install Firebase CLI
      run: npm install -g firebase-tools

    - name: Deploy frontend to Firebase Production
      run: |
        cd frontend
        firebase use production
        firebase deploy --only hosting --token ${{ secrets.FIREBASE_TOKEN }}
    
    - name: Notify Slack
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: '#36a64f'
        SLACK_TITLE: 'Production Deployment Successful'
        SLACK_MESSAGE: 'New version deployed to production environment'
